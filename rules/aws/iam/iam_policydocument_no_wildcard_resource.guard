#
#####################################
##          AWS Solutions          ##
#####################################
# Rule Identifier:
#   IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE
#
# Description:
#   Checks that no IAM Role in-line policies use resource: "*"
#
# Reports on:
#   AWS::IAM::Role
#
# Evaluates:
#   AWS CloudFormation
#
# Rule Parameters:
#   NA
#
# CFN_NAG Rule Id:
#   W10, W11, W12
#
# Scenarios:
# a) SKIP: when there are no IAM Roles, Policies, or ManagedPolicies present
# b) PASS: when all IAM Roles do not use resource: "*"
# c) FAIL: when any IAM Roles allow a wildcard for a resource
# d) SKIP: when metadata has rule suppression for IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE or W11, W12, or W13

let applicable_types = [
  "AWS::IAM::Role",
  "AWS::IAM::Policy",
  "AWS::IAM::ManagedPolicy"
]

let iam_policydocument_no_wildcard_resource = Resources.*[ Type in %applicable_types
  Metadata.cfn_nag.rules_to_suppress not exists or
  Metadata.cfn_nag.rules_to_suppress.*.id !in [ "W11", "W12", "W13" ]
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE"
]

rule IAM_POLICYDOCUMENT_NO_WILDCARD_RESOURCE when %iam_policydocument_no_wildcard_resource not empty {
  let violations = %iam_policydocument_no_wildcard_resource[
    some Properties.Policies[*].PolicyDocument.Statement[*] {
      some Resource[*] == "*"
      Effect == "Allow"
    }
    or
    some Properties.PolicyDocument.Statement[*] {
      some Resource[*] == "*"
      Effect == "Allow"
    }
    or
    some Properties.PolicyDocument.Statement[*] {
      some Resource[*] == "*"
      Effect == "Allow"
    }
  ]
  %violations empty
  <<
    Violation: IAM Role inline policy should not allow resource: "*"
    Fix: Limit resource as specifically as possible within your use case.
  >>
}
