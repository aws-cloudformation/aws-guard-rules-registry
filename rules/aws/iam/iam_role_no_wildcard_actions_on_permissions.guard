#
#####################################
##          AWS Solutions          ##
#####################################
# Rule Identifier:
#   IAM_ROLE_NO_WILDCARD_ACTIONS_ON_PERMISSIONS
#
# Description:
#   Checks if AWS Identity and Access Management (IAM) roles grant Action "*" in it's permission policy.
#
# Reports on:
#   AWS::IAM::Role
#
# Evaluates:
#   AWS CloudFormation
#
# Rule Parameters:
#   NA
# 
# CFN_NAG Rule Id:
#   F3
#
# Scenarios:
# a) SKIP: when there are no IAM Roles present
# b) PASS: when all IAM Roles do not allow full Action * for at least 1 AWS service
# c) FAIL: when any IAM Role allows Action * access for at least 1 AWS service.
# d) SKIP: when metada has rule suppression for IAM_ROLE_NO_WILDCARD_ACTIONS_ON_PERMISSIONS or CFN_NAG F3

#
# Select all IAM Role resources from incoming template (payload)
# 
let aws_iam_role_no_wildcard_actions_on_permissions = Resources.*[ Type == 'AWS::IAM::Role'
  Metadata.cfn_nag.rules_to_suppress not exists or 
  Metadata.cfn_nag.rules_to_suppress.*.id != "F3"
  Metadata.guard.SuppressedRules not exists or
  Metadata.guard.SuppressedRules.* != "IAM_ROLE_NO_WILDCARD_ACTIONS_ON_PERMISSIONS" 
]

rule IAM_ROLE_NO_WILDCARD_ACTIONS_ON_PERMISSIONS when %aws_iam_role_no_wildcard_actions_on_permissions !empty {
  let violations = %aws_iam_role_no_wildcard_actions_on_permissions[
    some Properties.PolicyDocument.Statement[*] {
      some Action[*] in ["*", /^[a-zA-Z0-9]*:\*$/]
      Effect == "Allow"
    }
  ]
  %violations empty
  <<
    Violation: IAM role should not allow * action on its permissions policy
    Fix: Remove policy statements that match {"Effect": "Allow", "Action": "<service-name>:*" ... } or {"Effect": "Allow", "Action": "*" ... }
  >>
} 