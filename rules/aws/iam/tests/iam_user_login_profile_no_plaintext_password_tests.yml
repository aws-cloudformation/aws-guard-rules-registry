###
# IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD tests
###
---
- name: Empty
  input: {}
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: SKIP
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: SKIP
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: SKIP

- name: Rule skips when no cluster present
  input:
    Resources: {}
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: SKIP
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: SKIP
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: SKIP

- name: Plaintext password
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: 'testPassword'
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: FAIL
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: FAIL

- name: Password from Parameter w/ noEcho, no default value
  input:
    Parameters:
      MyPassword:
        Type: String
        Description: Enter a password
        MinLength: 8
        NoEcho: true
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: !Ref MyPassword
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: PASS
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: SKIP
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: PASS

- name: Password from Parameter w/ noEcho, default value
  input:
    Parameters:
      MyPassword:
        Type: String
        Description: Enter a password
        MinLength: 8
        NoEcho: true
        Default: foobarbaz
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: !Ref MyPassword
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: FAIL
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: FAIL

- name: Password from Parameter w/out noEcho, no default value
  input:
    Parameters:
      MyPassword:
        Type: String
        Description: Enter a password
        MinLength: 8
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: !Ref MyPassword
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: FAIL
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: FAIL

- name: Password from Parameter w/ noEcho = false, no default value
  input:
    Parameters:
      MyPassword:
        Type: String
        Description: Enter a password
        MinLength: 8
        NoEcho: false
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: !Ref MyPassword
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: FAIL
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: FAIL

- name: Password is resolved from secretsmanager
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: '{{resolve:secretsmanager:{$MyIAMUserSecret}::password}}'
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: PASS
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: PASS

- name: Password is resolved from ssm-secure
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: '{{resolve:ssm-secure:password}}'
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: PASS
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: PASS

- name: LoginProfile does not exists
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: PASS
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: PASS

- name: Password does not exists
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: FAIL
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: FAIL
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: FAIL

##
## Suppression
##
- name: Plaintext password - F51 CFN_NAG Suppression
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: 'testPassword'
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
        Metadata:
          cfn_nag:
            rules_to_suppress:
            - id: F51
              reason: Suppressed for a very good reason
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: SKIP
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: SKIP
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: SKIP

- name: Plaintext password - Guard suppressed
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: 'testPassword'
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
        Metadata:
          guard:
            SuppressedRules:
            - IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: Suppressed for a very good reason
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: SKIP
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: SKIP
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: SKIP

- name: Plaintext password CFN_NAG and Guard suppressed
  input:
    Resources:
      SampleIAMUserResource:
        Type: AWS::IAM::User
        Properties:
          Groups:
            - 'Group1'
            - 'Group2'
          LoginProfile:
            Password: 'testPassword'
            PasswordResetRequired: true
          Path: '/'
          UserName: 'testUser'
        Metadata:
          cfn_nag:
            rules_to_suppress:
              - id: F51
                reason: Suppressed for a very good reason
          guard:
            SuppressedRules:
            - IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: Suppressed for a very good reason
  expectations:
    rules:
      IAM_USER_LOGIN_PROFILE_USES_SECURE_PARAMETER: SKIP
      IAM_USER_LOGIN_PROFILE_USES_SECURE_SERVICE: SKIP
      IAM_USER_LOGIN_PROFILE_NO_PLAINTEXT_PASSWORD: SKIP
